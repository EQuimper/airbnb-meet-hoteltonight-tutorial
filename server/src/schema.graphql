schema {
  query: Query
  mutation: Mutation
}

type Query {
  place(id: ID!): Place!
  getOwnerPlaces: [Place]!
  me: User!
}

type Mutation {
  loginWithEmailAndPassword(input: LoginWithEmailAndPasswordInput!): Auth
  signup(input: SignupInput!): Auth
  makePlaceInactive(id: ID!): Place!
  createPlace(input: CreatePlaceInput!): Place!
}

type Auth {
  token: String!
}

input LoginWithEmailAndPasswordInput {
  email: String!
  password: String!
}

input SignupInput {
  email: String!
  password: String!
}

type PlaceLocation {
  address: String!
  lat: Int!
  lng: Int!
}

type Place {
  _id: ID!
  name: String!
  description: String
  bedroom: Int!
  bathroom: Int!
  location: PlaceLocation!
  price: Int!
  haveInternet: Boolean!
  haveAirCond: Boolean!
  haveHeating: Boolean!
  haveTv: Boolean!
  isActive: Boolean!
  maxGuest: Int!
  owner: User!
  createdAt: String!
  updatedAt: String!
}

input PlaceLocationInput {
  address: String!
  lat: Int!
  lng: Int!
}

input CreatePlaceInput {
  name: String!
  description: String
  bedroom: Int!
  bathroom: Int!
  location: PlaceLocationInput!
  price: Int!
  haveInternet: Boolean!
  haveAirCond: Boolean!
  haveHeating: Boolean!
  haveTv: Boolean!
  maxGuest: Int!
}

type User {
  _id: ID!
  email: String!
  places: [Place]!
  createdAt: String!
  updatedAt: String!
}
